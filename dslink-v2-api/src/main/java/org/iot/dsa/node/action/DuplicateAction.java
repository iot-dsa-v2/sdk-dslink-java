package org.iot.dsa.node.action;

import org.iot.dsa.dslink.ActionResults;
import org.iot.dsa.node.DSInfo;
import org.iot.dsa.node.DSMap;
import org.iot.dsa.node.DSMetadata;
import org.iot.dsa.node.DSString;
import org.iot.dsa.node.DSValueType;

/**
 * Renames a dynamic child of a node.
 *
 * @author Aaron Hansen
 */
public class DuplicateAction extends DSAction {

    ///////////////////////////////////////////////////////////////////////////
    // Class Fields
    ///////////////////////////////////////////////////////////////////////////

    public static final String DUPLICATE = "Duplicate";
    public static final DuplicateAction INSTANCE = new DuplicateAction();
    private static final String NEW_NAME = "New Name";

    ///////////////////////////////////////////////////////////////////////////
    // Instance Fields
    ///////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    // Constructors
    ///////////////////////////////////////////////////////////////////////////

    public DuplicateAction() {
        addParameter(NEW_NAME, DSString.NULL, null);
        setImmutable(true);
    }

    ///////////////////////////////////////////////////////////////////////////
    // Public Methods
    ///////////////////////////////////////////////////////////////////////////

    @Override
    public ActionResults invoke(DSIActionRequest request) {
        String newName = request.getParameters().get(NEW_NAME, null);
        request.getTargetInfo().getParent().add(newName, request.getTarget().copy());
        return null;
    }

    @Override
    public void prepareParameter(DSInfo target, DSMap parameter) {
        parameter.put(DSMetadata.DEFAULT, target.getName());
    }

    ///////////////////////////////////////////////////////////////////////////
    // Protected Methods
    ///////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    // Package / Private Methods
    ///////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    // Inner Classes
    ///////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    // Initialization
    ///////////////////////////////////////////////////////////////////////////

}
